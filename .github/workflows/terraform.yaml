name: Terraform Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yaml'

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      id: tf-apply
      continue-on-error: true
      run: |
        set -e

      echo "Running Terraform apply with logging..."
      if ! terraform apply -auto-approve -var-file="terraform.tfvars" 2>&1 | tee apply.log; then
        echo "Terraform apply failed. Attempting to detect lock..."
        LOCK_ID=$(grep -A5 "Lock Info:" apply.log | grep ID | awk '{print $2}')
        echo "LOCK ID: $LOCK_ID"

      if [ ! -z "$LOCK_ID" ]; then
        echo "Forcing unlock with ID: $LOCK_ID"
        terraform force-unlock -force "$LOCK_ID"
        echo "Re-running terraform apply..."
        terraform apply -auto-approve -var-file="terraform.tfvars"
      else
        echo "No LOCK ID found. Cannot unlock."
        exit 1
      fi
    fi

    - name: Retry Terraform Apply (final)
      if: steps.tf-apply.outputs.exit_code != '0'
      run: terraform apply --auto-approve -var-file="terraform.tfvars"

    - name: Upload tfstate artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-tfstate-backup
        path: terraform/.terraform/terraform.tfstate
